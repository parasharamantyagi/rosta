#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('02-dec:server');
var http = require('http');
// const { unit_driver, transport_status } = require('../trait/sockets');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// var io = require('socket.io')(server, {
//   cors: {
//     origin: '*',
//   },
// });


// io.on('connection', (socket) => {
//   socket.on('create_unit', async (msg) => {
//     let return_data = await unit_driver(msg);
//     io.emit(`driver_id_${return_data.driver_id}`, return_data);
//   });

//   socket.on('transport', async (msg) => {
//     let return_data = await transport_status(msg);
//     // console.log(return_data);
//     io.emit(`transport_${return_data.driver_id}`, msg);
//     io.emit(`transport_status`, return_data);
// 	  io.emit(`notification_${return_data.driver_id}`, return_data.message);
//   });

//   socket.on('check_socket', async (msg) => {
//       io.emit('test_socket', 'socket is  working');
//   });
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('connected!');
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
